define(["require", "exports", "aurelia-testing", "aurelia-bootstrapper", "./shared"], function (require, exports, aurelia_testing_1, aurelia_bootstrapper_1, shared_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('ValidateBindingBehavior', function () {
        it('sets validateTrigger', function (done) {
            var component = aurelia_testing_1.StageComponent
                .withResources()
                .inView('<trigger-form></trigger-form>')
                .boundTo({});
            component.bootstrap(shared_1.configure);
            var viewModel;
            var renderer = { render: jasmine.createSpy() };
            component.create(aurelia_bootstrapper_1.bootstrap)
                // grab some references.
                .then(function () {
                viewModel = component.viewModel;
                viewModel.controller.addRenderer(renderer);
            })
                // standard validate binding behavior
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error1'); })
                .then(function () { return shared_1.blur(viewModel.standardInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error2'); })
                .then(function () { return shared_1.change(viewModel.standardInput, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error3'); })
                .then(function () { return shared_1.blur(viewModel.standardInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error4'); })
                // validateOnBlur binding behavior
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error5'); })
                .then(function () { return shared_1.blur(viewModel.blurInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error6'); })
                .then(function () { return shared_1.change(viewModel.blurInput, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error7'); })
                .then(function () { return shared_1.blur(viewModel.blurInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error8'); })
                // validateOnFocusout binding behavior - native input
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error5.1'); })
                .then(function () { return shared_1.focusout(viewModel.focusoutInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error6.1'); })
                .then(function () { return shared_1.change(viewModel.focusoutInput, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error7.1'); })
                .then(function () { return shared_1.focusout(viewModel.focusoutInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error8.1'); })
                // validateOnFocusout binding behavior - custom element
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error5.2'); })
                .then(function () { return shared_1.focusout(viewModel.focusoutCustomInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error6.2'); })
                .then(function () { return shared_1.change(viewModel.focusoutCustomInput, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error7.2'); })
                .then(function () { return shared_1.focusout(viewModel.focusoutCustomInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error8.2'); })
                // validateOnChange binding behavior
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error9'); })
                .then(function () { return shared_1.blur(viewModel.changeInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error10'); })
                .then(function () { return shared_1.change(viewModel.changeInput, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error11'); })
                .then(function () { return shared_1.change(viewModel.changeInput, ''); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error12'); })
                .then(function () { return shared_1.change(viewModel.changeInput, 'test2'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error13'); })
                // validateOnChangeOrBlur binding behavior
                .then(function () { return shared_1.change(viewModel.changeInput, ''); }) // make one error
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error14'); })
                .then(function () { return shared_1.blur(viewModel.changeOrBlurInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error15'); })
                .then(function () { return shared_1.change(viewModel.changeOrBlurInput, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error16'); })
                .then(function () { return shared_1.blur(viewModel.changeOrBlurInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(2, 'error17'); })
                .then(function () { return shared_1.change(viewModel.changeOrBlurInput, 'foo'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error18'); })
                .then(function () { return shared_1.change(viewModel.changeInput, 'adsf'); }) // clear the one error
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error19'); })
                // validateOnChangeOrFocusout binding behavior - native input
                .then(function () { return shared_1.change(viewModel.changeInput, ''); }) // make one error
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error14.1'); })
                .then(function () { return shared_1.focusout(viewModel.changeOrFocusoutInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error15.1'); })
                .then(function () { return shared_1.change(viewModel.changeOrFocusoutInput, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error16.1'); })
                .then(function () { return shared_1.focusout(viewModel.changeOrFocusoutInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(2, 'error17.1'); })
                .then(function () { return shared_1.change(viewModel.changeOrFocusoutInput, 'foo'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error18.1'); })
                .then(function () { return shared_1.change(viewModel.changeInput, 'adsf'); }) // clear the one error
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error19.1'); })
                // validateOnChangeOrFocusout binding behavior - custom element
                .then(function () { return shared_1.change(viewModel.changeInput, ''); }) // make one error
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error14.2'); })
                .then(function () { return shared_1.focusout(viewModel.changeOrFocusoutCustomInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error15.2'); })
                .then(function () { return shared_1.change(viewModel.changeOrFocusoutCustomInput, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error16.3'); })
                .then(function () { return shared_1.focusout(viewModel.changeOrFocusoutCustomInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(2, 'error17.4'); })
                .then(function () { return shared_1.change(viewModel.changeOrFocusoutCustomInput, 'foo'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error18.5'); })
                .then(function () { return shared_1.change(viewModel.changeInput, 'adsf'); }) // clear the one error
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error19.6'); })
                // validateManually binding behavior
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error20'); })
                .then(function () { return shared_1.blur(viewModel.manualInput); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error21'); })
                .then(function () { return shared_1.change(viewModel.manualInput, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error22'); })
                .then(function () { return shared_1.change(viewModel.manualInput, ''); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error23'); })
                // cleanup and finish.
                .then(function () { return component.dispose(); })
                .then(done);
        });
    });
});
