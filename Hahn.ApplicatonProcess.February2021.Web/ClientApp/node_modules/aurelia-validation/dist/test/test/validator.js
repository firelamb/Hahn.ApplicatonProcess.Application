define(["require", "exports", "aurelia-dependency-injection", "aurelia-templating", "aurelia-templating-binding", "../src/aurelia-validation"], function (require, exports, aurelia_dependency_injection_1, aurelia_templating_1, aurelia_templating_binding_1, aurelia_validation_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('Validator', function () {
        var validator;
        beforeAll(function () {
            var container = new aurelia_dependency_injection_1.Container();
            container.registerInstance(aurelia_templating_1.BindingLanguage, container.get(aurelia_templating_binding_1.TemplatingBindingLanguage));
            var messageParser = container.get(aurelia_validation_1.ValidationMessageParser);
            var propertyParser = container.get(aurelia_validation_1.PropertyAccessorParser);
            aurelia_validation_1.ValidationRules.initialize(messageParser, propertyParser);
            validator = container.get(aurelia_validation_1.StandardValidator);
        });
        it('validates email', function (done) {
            var obj = { prop: 'foo@bar.com' };
            var rules = aurelia_validation_1.ValidationRules.ensure('prop').email().rules;
            validator.validateProperty(obj, 'prop', rules)
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'prop', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                obj = { prop: 'foo' };
                rules = aurelia_validation_1.ValidationRules.ensure('prop').email().rules;
                return validator.validateProperty(obj, 'prop', rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'prop', false, 'Prop is not a valid email.')];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                obj = { prop: null };
                rules = aurelia_validation_1.ValidationRules.ensure('prop').email().rules;
                return validator.validateProperty(obj, 'prop', rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'prop', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(done);
        });
        it('validates equals', function (done) {
            var obj = { prop: 'test' };
            var rules = aurelia_validation_1.ValidationRules.ensure('prop').equals('test').rules;
            validator.validateProperty(obj, 'prop', rules)
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'prop', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                obj = { prop: 'foo' };
                rules = aurelia_validation_1.ValidationRules.ensure('prop').equals('test').rules;
                return validator.validateProperty(obj, 'prop', rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'prop', false, 'Prop must be test.')];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                obj = { prop: null };
                rules = aurelia_validation_1.ValidationRules.ensure('prop').equals('test').rules;
                return validator.validateProperty(obj, 'prop', rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'prop', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(done);
        });
        it('validates numeric properties', function (done) {
            var obj = { value: 1 };
            var rules = aurelia_validation_1.ValidationRules.ensure('value').min(1).rules;
            validator.validateObject(obj, rules)
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'value', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                rules = aurelia_validation_1.ValidationRules.ensure('value').max(1).rules;
                return validator.validateObject(obj, rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'value', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                rules = aurelia_validation_1.ValidationRules.ensure('value').range(0, 1).rules;
                return validator.validateObject(obj, rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'value', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                rules = aurelia_validation_1.ValidationRules.ensure('value').between(0, 2).rules;
                return validator.validateObject(obj, rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'value', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                rules = aurelia_validation_1.ValidationRules.ensure('value').min(2).rules;
                return validator.validateObject(obj, rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'value', false, 'Value must be at least 2.')];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                rules = aurelia_validation_1.ValidationRules.ensure('value').max(0).rules;
                return validator.validateObject(obj, rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'value', false, 'Value must be at most 0.')];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                rules = aurelia_validation_1.ValidationRules.ensure('value').range(2, 3).rules;
                return validator.validateObject(obj, rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'value', false, 'Value must be between or equal to 2 and 3.')];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(function () {
                rules = aurelia_validation_1.ValidationRules.ensure('value').between(1, 3).rules;
                return validator.validateObject(obj, rules);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'value', false, 'Value must be between but not equal to 1 and 3.')];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(done);
        });
        it('handles numeric properties', function (done) {
            var objStr = {};
            objStr['2'] = 'test';
            var objNum = {};
            objNum[2] = 'test';
            var rulesStr = aurelia_validation_1.ValidationRules.ensure('2').equals('test').rules;
            var rulesNum = aurelia_validation_1.ValidationRules.ensure(2).equals('test').rules;
            Promise.resolve()
                .then(function () {
                return validator.validateProperty(objStr, 2, rulesStr);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rulesStr[0][0], objStr, '2', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
                return validator.validateProperty(objNum, 2, rulesStr);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rulesStr[0][0], objNum, '2', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
                return validator.validateProperty(objStr, '2', rulesStr);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rulesStr[0][0], objStr, '2', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
                return validator.validateProperty(objNum, '2', rulesStr);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rulesStr[0][0], objNum, '2', true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
                return validator.validateProperty(objStr, 2, rulesNum);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rulesNum[0][0], objStr, 2, true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
                return validator.validateProperty(objNum, 2, rulesNum);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rulesNum[0][0], objNum, 2, true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
                return validator.validateProperty(objStr, '2', rulesNum);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rulesNum[0][0], objStr, 2, true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
                return validator.validateProperty(objNum, '2', rulesNum);
            })
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rulesNum[0][0], objNum, 2, true, null)];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
            })
                .then(done);
        });
        it('bails', function (done) {
            var obj = { prop: 'invalid email', prop2: '' };
            var spy1 = jasmine.createSpy().and.returnValue(true);
            var spy2 = jasmine.createSpy().and.returnValue(true);
            var rules = aurelia_validation_1.ValidationRules
                .ensure('prop').email().then().satisfies(spy1)
                .ensure('prop2').satisfies(spy2)
                .rules;
            validator.validateProperty(obj, 'prop', rules)
                .then(function (results) {
                var expected = [new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'prop', false, 'Prop is not a valid email.')];
                expected[0].id = results[0].id;
                expect(results).toEqual(expected);
                expect(spy1.calls.count()).toBe(0);
            })
                .then(function () { return validator.validateObject(obj, rules); })
                .then(function (results) {
                var expected = [
                    new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'prop', false, 'Prop is not a valid email.'),
                    new aurelia_validation_1.ValidateResult(rules[0][1], obj, 'prop2', true, null)
                ];
                expected[0].id = results[0].id;
                expected[1].id = results[1].id;
                expect(results).toEqual(expected);
                expect(spy1.calls.count()).toBe(0);
                expect(spy2.calls.count()).toBe(1);
            })
                .then(function () {
                obj = { prop: 'foo@bar.com', prop2: '' };
                return validator.validateProperty(obj, 'prop', rules);
            })
                .then(function (results) {
                var expected = [
                    new aurelia_validation_1.ValidateResult(rules[0][0], obj, 'prop', true),
                    new aurelia_validation_1.ValidateResult(rules[1][0], obj, 'prop', true),
                ];
                expected[0].id = results[0].id;
                expected[1].id = results[1].id;
                expect(results).toEqual(expected);
                expect(spy1.calls.count()).toBe(1);
            })
                .then(done);
        });
        it('handles empty rulesets', function (done) {
            var obj = { prop: 'test', __rules__: [] };
            validator.validateProperty(obj, 'test', null)
                .then(done);
        });
    });
});
