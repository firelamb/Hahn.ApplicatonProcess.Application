define(["require", "exports", "aurelia-testing", "aurelia-bootstrapper", "../src/aurelia-validation", "./shared"], function (require, exports, aurelia_testing_1, aurelia_bootstrapper_1, aurelia_validation_1, shared_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('end to end', function () {
        it('basic scenarios', function (done) {
            var component = aurelia_testing_1.StageComponent
                .withResources()
                .inView('<registration-form></registration-form>')
                .boundTo({});
            component.bootstrap(shared_1.configure);
            var firstName;
            var lastName;
            var number1;
            var number2;
            // let password: HTMLInputElement;
            var confirmPassword;
            var ceInput;
            var viewModel;
            var renderer = { render: jasmine.createSpy() };
            component.create(aurelia_bootstrapper_1.bootstrap)
                // grab some references.
                .then(function () {
                viewModel = component.viewModel;
                viewModel.controller.addRenderer(renderer);
                firstName = component.element.querySelector('#firstName');
                lastName = component.element.querySelector('#lastName');
                number1 = component.element.querySelector('#number1');
                number2 = component.element.querySelector('#number2');
                // password = component.element.querySelector('#password') as HTMLInputElement;
                confirmPassword = component.element.querySelector('#confirmPassword');
                ceInput = component.element.querySelector('custom-input#ce input');
            })
                // initially there should not be any errors
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error1'); })
                // blur the ceInput field- this should not trigger validation.
                .then(function () { return shared_1.blur(ceInput); })
                // confirm there are no errors.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error1.1'); })
                // focusout the ceInput field - this should not trigger validation as well because the default trigger is blur.
                .then(function () { return shared_1.focusout(ceInput); })
                // confirm there are no errors.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error1.2'); })
                // blur the firstName field- this should trigger validation.
                .then(function () { return shared_1.blur(firstName); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error2'); })
                // make a model change to the firstName field.
                // this should reset the errors for the firstName field.
                .then(function () { return viewModel.firstName = 'test'; })
                // confirm the errors were reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error3'); })
                // blur the firstName field- this should trigger validation.
                .then(function () { return shared_1.blur(firstName); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error2.1'); })
                // make a model change to the firstName field.
                // this should reset the errors for the firstName field.
                .then(function () { return viewModel.firstName = 'foo'; })
                // confirm the errors were reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error3.1'); })
                // blur the lastName field- this should trigger validation.
                .then(function () { return shared_1.blur(lastName); })
                // confirm there's an error.
                .then(function () {
                expect(viewModel.controller.errors.length).toBe(1, 'error4');
                var calls = renderer.render.calls;
                var renderInstruction = calls.argsFor(calls.count() - 1)[0];
                expect(renderInstruction.render[0].elements[0]).toBe(lastName, 'error5');
            })
                // blur the number1 field- this should trigger validation.
                .then(function () { return shared_1.blur(number1); })
                // confirm there's an error.
                .then(function () {
                expect(viewModel.controller.errors.length).toBe(2, 'error6');
                var calls = renderer.render.calls;
                var renderInstruction = calls.argsFor(calls.count() - 1)[0];
                expect(renderInstruction.render[0].elements[0]).toBe(number1, 'error7');
            })
                // blur the number2 field- this should trigger validation.
                .then(function () { return shared_1.blur(number2); })
                // confirm there's an error.
                .then(function () {
                expect(viewModel.controller.errors.length).toBe(3, 'error8');
                var calls = renderer.render.calls;
                var renderInstruction = calls.argsFor(calls.count() - 1)[0];
                expect(renderInstruction.render[0].elements[0]).toBe(number2, 'error9');
            })
                // make a model change to the number1 field.
                // this should reset the errors for the number1 field.
                .then(function () { return viewModel.number1 = 1; })
                // confirm the error was reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(2, 'error10'); })
                // make a model change to the number2 field.
                // this should reset the errors for the number2 field.
                .then(function () { return viewModel.number2 = 2; })
                // confirm the error was reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error11'); })
                // change the numbers back to invalid values.
                .then(function () {
                viewModel.number1 = 0;
                viewModel.number2 = 0;
                viewModel.firstName = '';
            })
                // hide the form and change the validateTrigger to 'focusout'.
                .then(function () {
                viewModel.showForm = false;
                viewModel.controller.validateTrigger = aurelia_validation_1.validateTrigger.focusout;
            })
                // show the form
                .then(function () { return viewModel.showForm = true; })
                // initially there should not be any errors
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error100.1'); })
                // focusout the ceInput field - this trigger validation.
                .then(function () { return shared_1.focusout(ceInput); })
                // confirm there are no errors.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error100.2'); })
                // make a model change to the firstName field.
                // this should reset the errors for the firstName field.
                .then(function () { return viewModel.ceValue = 'test'; })
                // confirm the errors were reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error100.2.1'); })
                // focusout the firstName field- this should trigger validation.
                .then(function () { return shared_1.focusout(firstName); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error100.3'); })
                // make a model change to the firstName field.
                // this should reset the errors for the firstName field.
                .then(function () { return viewModel.firstName = 'test'; })
                // confirm the errors were reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error100.4'); })
                // focusout the firstName field- this should trigger validation.
                .then(function () { return shared_1.focusout(firstName); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error100.3.1'); })
                // make a model change to the firstName field.
                // this should reset the errors for the firstName field.
                .then(function () { return viewModel.firstName = 'foo'; })
                // confirm the errors were reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error100.4.1'); })
                // focusout the lastName field- this should trigger validation.
                .then(function () { return shared_1.focusout(lastName); })
                // confirm there's an error.
                .then(function () {
                expect(viewModel.controller.errors.length).toBe(1, 'error100.5');
                var calls = renderer.render.calls;
                var renderInstruction = calls.argsFor(calls.count() - 1)[0];
                expect(renderInstruction.render[0].elements[0]).toBe(lastName, 'error100.6');
            })
                // focusout the number1 field- this should trigger validation.
                .then(function () { return shared_1.focusout(number1); })
                // confirm there's an error.
                .then(function () {
                expect(viewModel.controller.errors.length).toBe(2, 'error100.7');
                var calls = renderer.render.calls;
                var renderInstruction = calls.argsFor(calls.count() - 1)[0];
                expect(renderInstruction.render[0].elements[0]).toBe(number1, 'error100.8');
            })
                // focusout the number2 field- this should trigger validation.
                .then(function () { return shared_1.focusout(number2); })
                // confirm there's an error.
                .then(function () {
                expect(viewModel.controller.errors.length).toBe(3, 'error100.9');
                var calls = renderer.render.calls;
                var renderInstruction = calls.argsFor(calls.count() - 1)[0];
                expect(renderInstruction.render[0].elements[0]).toBe(number2, 'error100.10');
            })
                // make a model change to the number1 field.
                // this should reset the errors for the number1 field.
                .then(function () { return viewModel.number1 = 1; })
                // confirm the error was reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(2, 'error100.11'); })
                // make a model change to the number2 field.
                // this should reset the errors for the number2 field.
                .then(function () { return viewModel.number2 = 2; })
                // confirm the error was reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error100.12'); })
                // change the numbers back to invalid values.
                .then(function () {
                viewModel.number1 = 0;
                viewModel.number2 = 0;
                viewModel.firstName = '';
            })
                // hide the form and change the validateTrigger to 'change'.
                .then(function () {
                viewModel.showForm = false;
                viewModel.controller.validateTrigger = aurelia_validation_1.validateTrigger.change;
            })
                // show the form
                .then(function () { return viewModel.showForm = true; })
                // confirm hiding and showing the form reset the errors.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error12'); })
                // change the firstName field- this should trigger validation.
                .then(function () { return shared_1.change(ceInput, 'test'); })
                // confirm there's no error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error13'); })
                // change the firstName field- this should trigger validation.
                .then(function () { return shared_1.change(ceInput, ''); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error14'); })
                // change the firstName field- this should trigger validation.
                .then(function () { return shared_1.change(firstName, 'foo'); })
                // confirm there's no error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error13'); })
                // change the firstName field- this should trigger validation.
                .then(function () { return shared_1.change(firstName, ''); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(2, 'error14'); })
                // change the number1 field- this should trigger validation.
                .then(function () { return shared_1.change(number1, '-1'); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(3, 'error15'); })
                // change the number2 field- this should trigger validation.
                .then(function () { return shared_1.change(number2.firstElementChild, '-1'); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(4, 'error16'); })
                // change the number1 field- this should trigger validation.
                .then(function () { return shared_1.change(number1, '32'); })
                // confirm the error was reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(3, 'error17'); })
                // change the number2 field- this should trigger validation.
                .then(function () { return shared_1.change(number2.firstElementChild, '23'); })
                // confirm the error was reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(2, 'error18'); })
                // change the numbers back to invalid values.
                .then(function () {
                viewModel.number1 = 0;
                viewModel.number2 = 0;
                viewModel.password = 'a';
                viewModel.confirmPassword = 'a';
                viewModel.controller.reset();
            })
                // make the passwords mismatch.
                .then(function () { return shared_1.change(confirmPassword, 'b'); })
                // confirm the custom validator worked
                .then(function () { return expect(viewModel.controller.errors[0].message)
                .toBe('Confirm Password must match Password', 'error19'); })
                // hide the form and change the validateTrigger to 'manual'.
                .then(function () {
                viewModel.showForm = false;
                viewModel.controller.validateTrigger = aurelia_validation_1.validateTrigger.manual;
            })
                // show the form
                .then(function () { return viewModel.showForm = true; })
                // confirm hiding and showing the form reset the errors.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error20'); })
                // validate all bindings
                .then(function () { return viewModel.controller.validate(); })
                // confirm validating resulted in errors.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(7, 'error21'); })
                // reset all bindings
                .then(function () { return viewModel.controller.reset(); })
                // confirm resetting cleared all errors.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error22'); })
                // hide the form and change the validateTrigger to 'changeOrBlur'.
                .then(function () {
                viewModel.showForm = false;
                viewModel.controller.validateTrigger = aurelia_validation_1.validateTrigger.changeOrBlur;
            })
                // show the form
                .then(function () { return viewModel.showForm = true; })
                // confirm hiding and showing the form reset the errors.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error23'); })
                // blur the ceInput field- this should trigger validation.
                .then(function () { return shared_1.blur(ceInput); })
                // confirm there's no error as the event won't bubble
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error24'); })
                // make a model change to the firstName field.
                // and blur the field
                .then(function () { return shared_1.change(ceInput, 'test'); })
                .then(function () { return shared_1.blur(ceInput); })
                // confirm there are no errors as blur still does not bubble
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error25'); })
                // focusout the field
                .then(function () { return shared_1.focusout(ceInput); })
                // confirm there are no errors as no handler for focusout
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error25'); })
                // blur the firstName field- this should trigger validation.
                .then(function () { return shared_1.blur(firstName); })
                // confirm there's no error as it is still pristine.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error24'); })
                // make a model change to the firstName field.
                // and trigger the first validation by blurring the field
                .then(function () { return shared_1.change(firstName, 'test'); })
                .then(function () { return shared_1.blur(firstName); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error25'); })
                // As the field is already touched by validation, changing the value to a valid one should reset the error
                .then(function () { return shared_1.change(firstName, 'foo'); })
                // confirm the errors were reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error25.1'); })
                // change the lastName field- this should trigger validation.
                .then(function () { return shared_1.change(lastName, 'abcdef'); })
                .then(function () { return shared_1.change(lastName, ''); })
                .then(function () { return shared_1.blur(lastName); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error26'); })
                // make lastName valid again
                .then(function () { return shared_1.change(lastName, 'ghi'); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error27'); })
                // change the numbers back to invalid values.
                .then(function () {
                viewModel.number1 = 0;
                viewModel.number2 = 0;
                viewModel.ceValue = '';
                viewModel.firstName = '';
                viewModel.lastName = '';
                viewModel.password = 'a';
                viewModel.controller.reset();
            })
                // perform manual validation and
                // assert that when the values are changed to valid values, all the errors are removed
                .then(function () { return viewModel.controller.validate(); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(7, 'error27.1'); })
                .then(function () { return shared_1.change(ceInput, 'foo'); })
                .then(function () { return shared_1.change(firstName, 'foo'); })
                .then(function () { return shared_1.change(lastName, 'test'); })
                .then(function () {
                viewModel.number1 = 42;
                viewModel.number2 = 42;
                viewModel.email = 'a@b.com';
                viewModel.password = 'a';
                return shared_1.change(confirmPassword, 'a');
            })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error27.2'); })
                // change the numbers back to invalid values.
                .then(function () {
                viewModel.number1 = 0;
                viewModel.number2 = 0;
                viewModel.ceValue = '';
                viewModel.firstName = '';
                viewModel.lastName = '';
            })
                // hide the form and change the validateTrigger to 'changeOrFocusout'.
                .then(function () {
                viewModel.showForm = false;
                viewModel.controller.validateTrigger = aurelia_validation_1.validateTrigger.changeOrFocusout;
            })
                // show the form
                .then(function () { return viewModel.showForm = true; })
                // confirm hiding and showing the form reset the errors.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error200.1'); })
                // focusout the ceInput field- this should trigger validation.
                .then(function () { return shared_1.focusout(ceInput); })
                // confirm there's an error
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error200.2'); })
                // make a model change to the firstName field.
                .then(function () { return shared_1.change(ceInput, 'test'); })
                .then(function () { return shared_1.focusout(ceInput); })
                // confirm there are no errors
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error200.3'); })
                // set the ceInput to valid value
                .then(function () { return shared_1.change(ceInput, 'foo'); })
                // confirm that there are no errors
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error200.3.1'); })
                // focusout the firstName field- this should trigger validation.
                .then(function () { return shared_1.focusout(firstName); })
                // confirm there's no error as it is still pristine.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error200.5'); })
                // make a model change to the firstName field.
                // and trigger the first validation by focusing out the field
                .then(function () { return shared_1.change(firstName, 'test'); })
                .then(function () { return shared_1.focusout(firstName); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error200.6'); })
                // As the field is already touched by validation, changing the value to a valid one should reset the error
                .then(function () { return shared_1.change(firstName, 'foo'); })
                // confirm the errors were reset.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error200.7'); })
                // change the lastName field- this should trigger validation.
                .then(function () { return shared_1.change(lastName, 'abcdef'); })
                .then(function () { return shared_1.change(lastName, ''); })
                .then(function () { return shared_1.focusout(lastName); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1, 'error200.8'); })
                // make lastName valid again
                .then(function () { return shared_1.change(lastName, 'ghi'); })
                // confirm there's an error.
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error200.9'); })
                // change the numbers back to invalid values.
                .then(function () {
                viewModel.number1 = 0;
                viewModel.number2 = 0;
                viewModel.ceValue = '';
                viewModel.firstName = '';
                viewModel.lastName = '';
                viewModel.email = '';
                viewModel.password = '';
                viewModel.controller.reset();
            })
                // perform manual validation and
                // assert that when the values are changed to valid values, all the errors are removed
                .then(function () { return viewModel.controller.validate(); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(7, 'error200.10'); })
                .then(function () { return shared_1.change(ceInput, 'foo'); })
                .then(function () { return shared_1.change(firstName, 'foo'); })
                .then(function () { return shared_1.change(lastName, 'test'); })
                .then(function () {
                viewModel.number1 = 42;
                viewModel.number2 = 42;
                viewModel.email = 'a@b.com';
                viewModel.password = 'a';
                return shared_1.change(confirmPassword, 'a');
            })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0, 'error200.11'); })
                // add some errors
                .then(function () {
                var error1 = viewModel.controller.addError('object error', viewModel);
                expect(error1.message).toBe('object error', 'error28');
                expect(error1.object).toBe(viewModel, 'error29');
                expect(error1.propertyName).toBe(null, 'error30');
                var error2 = viewModel.controller.addError('string property error', viewModel, 'lastName');
                expect(error2.message).toBe('string property error', 'error31');
                expect(error2.object).toBe(viewModel, 'error32');
                expect(error2.propertyName).toBe('lastName', 'error33');
                var error3 = viewModel.controller.addError('expression property error', viewModel, function (vm) { return vm.firstName; });
                expect(error3.message).toBe('expression property error', 'error34');
                expect(error3.object).toBe(viewModel, 'error35');
                expect(error3.propertyName).toBe('firstName', 'error36');
                expect(viewModel.controller.errors.length).toBe(3, 'error37');
                viewModel.controller.removeError(error1);
                expect(viewModel.controller.errors.length).toBe(2, 'error38');
                viewModel.controller.removeError(error2);
                expect(viewModel.controller.errors.length).toBe(1, 'error39');
                viewModel.controller.removeError(error3);
                expect(viewModel.controller.errors.length).toBe(0, 'error40');
            })
                // subscribe to error events
                .then(function () {
                var event1;
                var event2;
                var spy1 = jasmine.createSpy().and.callFake(function (event) { return event1 = event; });
                var spy2 = jasmine.createSpy().and.callFake(function (event) { return event2 = event; });
                viewModel.controller.subscribe(spy1);
                viewModel.controller.subscribe(spy2);
                return Promise.resolve()
                    .then(function () { return shared_1.change(lastName, ''); })
                    .then(function () {
                    expect(spy1).toHaveBeenCalled();
                    expect(spy2).toHaveBeenCalled();
                    expect(event1).toBeDefined();
                    expect(event2).toBeDefined();
                    expect(event1).toBe(event2, 'error43');
                    expect(event1.errors.length).toBe(1, 'error44');
                    spy1.calls.reset();
                    spy2.calls.reset();
                    event1 = null;
                    event2 = null;
                })
                    .then(function () { return shared_1.change(firstName, ''); })
                    .then(function () {
                    expect(spy1).toHaveBeenCalled();
                    expect(spy2).toHaveBeenCalled();
                    expect(event1).toBeDefined();
                    expect(event2).toBeDefined();
                    expect(event1).toBe(event2, 'error47');
                    expect(event1.errors.length).toBe(2, 'error48');
                });
            })
                // cleanup and finish.
                .then(function () { return component.dispose(); })
                .then(done);
        });
    });
});
