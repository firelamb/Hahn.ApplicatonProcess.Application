define(["require", "exports", "aurelia-testing", "aurelia-bootstrapper", "./shared"], function (require, exports, aurelia_testing_1, aurelia_bootstrapper_1, shared_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    describe('ValidationController', function () {
        it('handles bindings with null objects', function (done) {
            var component = aurelia_testing_1.StageComponent
                .withResources()
                .inView('<nullable-object-form></nullable-object-form>')
                .boundTo({});
            component.bootstrap(shared_1.configure);
            var viewModel;
            var renderer = { render: jasmine.createSpy() };
            component.create(aurelia_bootstrapper_1.bootstrap)
                // grab some references.
                .then(function () {
                viewModel = component.viewModel;
                viewModel.controller.addRenderer(renderer);
            })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0); })
                .then(function () { return shared_1.blur(viewModel.input); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1); })
                .then(function () { return shared_1.change(viewModel.input, 'test'); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1); })
                .then(function () { return shared_1.blur(viewModel.input); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0); })
                .then(function () { return viewModel._obj = null; })
                .then(function () { return shared_1.blur(viewModel.input); })
                .then(function () { return expect(viewModel.obj).toBe(null); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0); })
                .then(function () { return viewModel._obj = { prop: '' }; })
                .then(function () { return shared_1.blur(viewModel.input); })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(1); })
                .then(function () {
                viewModel._obj = null;
                // wait for dirty-checking...
                return new Promise(function (resolve) { return setTimeout(resolve, 500); });
            })
                .then(function () { return expect(viewModel.controller.errors.length).toBe(0); })
                // cleanup and finish.
                .then(function () { return component.dispose(); })
                .then(done);
        });
    });
});
