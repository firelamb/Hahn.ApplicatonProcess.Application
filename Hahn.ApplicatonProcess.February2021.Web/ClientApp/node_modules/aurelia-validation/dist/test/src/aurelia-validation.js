// Exports
define(["require", "exports", "tslib", "./config", "./get-target-dom-element", "./property-info", "./property-accessor-parser", "./validate-binding-behavior", "./validate-event", "./validate-result", "./validate-trigger", "./validation-controller", "./validation-controller-factory", "./validation-errors-custom-attribute", "./validation-renderer-custom-attribute", "./validator", "./implementation/rules", "./implementation/standard-validator", "./implementation/validation-messages", "./implementation/validation-message-parser", "./implementation/validation-rules", "./config", "./implementation/validation-message-parser", "./property-accessor-parser", "./implementation/validation-rules", "./validate-binding-behavior", "./validation-errors-custom-attribute", "./validation-renderer-custom-attribute"], function (require, exports, tslib_1, config_1, get_target_dom_element_1, property_info_1, property_accessor_parser_1, validate_binding_behavior_1, validate_event_1, validate_result_1, validate_trigger_1, validation_controller_1, validation_controller_factory_1, validation_errors_custom_attribute_1, validation_renderer_custom_attribute_1, validator_1, rules_1, standard_validator_1, validation_messages_1, validation_message_parser_1, validation_rules_1, config_2, validation_message_parser_2, property_accessor_parser_2, validation_rules_2, validate_binding_behavior_2, validation_errors_custom_attribute_2, validation_renderer_custom_attribute_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    tslib_1.__exportStar(config_1, exports);
    tslib_1.__exportStar(get_target_dom_element_1, exports);
    tslib_1.__exportStar(property_info_1, exports);
    tslib_1.__exportStar(property_accessor_parser_1, exports);
    tslib_1.__exportStar(validate_binding_behavior_1, exports);
    tslib_1.__exportStar(validate_event_1, exports);
    tslib_1.__exportStar(validate_result_1, exports);
    tslib_1.__exportStar(validate_trigger_1, exports);
    tslib_1.__exportStar(validation_controller_1, exports);
    tslib_1.__exportStar(validation_controller_factory_1, exports);
    tslib_1.__exportStar(validation_errors_custom_attribute_1, exports);
    tslib_1.__exportStar(validation_renderer_custom_attribute_1, exports);
    tslib_1.__exportStar(validator_1, exports);
    tslib_1.__exportStar(rules_1, exports);
    tslib_1.__exportStar(standard_validator_1, exports);
    tslib_1.__exportStar(validation_messages_1, exports);
    tslib_1.__exportStar(validation_message_parser_1, exports);
    tslib_1.__exportStar(validation_rules_1, exports);
    /**
     * Configures the plugin.
     */
    function configure(
    // tslint:disable-next-line:ban-types
    frameworkConfig, callback) {
        // the fluent rule definition API needs the parser to translate messages
        // to interpolation expressions.
        var messageParser = frameworkConfig.container.get(validation_message_parser_2.ValidationMessageParser);
        var propertyParser = frameworkConfig.container.get(property_accessor_parser_2.PropertyAccessorParser);
        validation_rules_2.ValidationRules.initialize(messageParser, propertyParser);
        // configure...
        var config = new config_2.GlobalValidationConfiguration();
        if (callback instanceof Function) {
            callback(config);
        }
        config.apply(frameworkConfig.container);
        // globalize the behaviors.
        if (frameworkConfig.globalResources) {
            frameworkConfig.globalResources(validate_binding_behavior_2.ValidateBindingBehavior, validate_binding_behavior_2.ValidateManuallyBindingBehavior, validate_binding_behavior_2.ValidateOnBlurBindingBehavior, validate_binding_behavior_2.ValidateOnFocusoutBindingBehavior, validate_binding_behavior_2.ValidateOnChangeBindingBehavior, validate_binding_behavior_2.ValidateOnChangeOrBlurBindingBehavior, validate_binding_behavior_2.ValidateOnChangeOrFocusoutBindingBehavior, validation_errors_custom_attribute_2.ValidationErrorsCustomAttribute, validation_renderer_custom_attribute_2.ValidationRendererCustomAttribute);
        }
    }
    exports.configure = configure;
});
