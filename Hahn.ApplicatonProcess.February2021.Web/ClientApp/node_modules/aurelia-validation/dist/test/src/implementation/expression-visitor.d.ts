import { ValueConverter, Conditional, AccessScope, AccessMember, AccessKeyed, CallMember, BindingBehavior, Binary, LiteralPrimitive, LiteralString } from 'aurelia-binding';
export declare class ExpressionVisitor {
    visitChain(chain: any): void;
    visitBindingBehavior(behavior: BindingBehavior): void;
    visitValueConverter(converter: ValueConverter): void;
    visitAssign(assign: any): void;
    visitConditional(conditional: Conditional): void;
    visitAccessThis(access: any): void;
    visitAccessScope(access: AccessScope): void;
    visitAccessMember(access: AccessMember): void;
    visitAccessKeyed(access: AccessKeyed): void;
    visitCallScope(call: any): void;
    visitCallFunction(call: any): void;
    visitCallMember(call: CallMember): void;
    visitPrefix(prefix: any): void;
    visitBinary(binary: Binary): void;
    visitLiteralPrimitive(literal: LiteralPrimitive): void;
    visitLiteralArray(literal: any): void;
    visitLiteralObject(literal: any): void;
    visitLiteralString(literal: LiteralString): void;
    private visitArgs;
}
