define(["require", "exports", "tslib", "aurelia-task-queue", "./validate-trigger", "./validate-binding-behavior-base", "aurelia-binding"], function (require, exports, tslib_1, aurelia_task_queue_1, validate_trigger_1, validate_binding_behavior_base_1, aurelia_binding_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Binding behavior. Indicates the bound property should be validated
     * when the validate trigger specified by the associated controller's
     * validateTrigger property occurs.
     */
    var ValidateBindingBehavior = /** @class */ (function (_super) {
        tslib_1.__extends(ValidateBindingBehavior, _super);
        function ValidateBindingBehavior() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ValidateBindingBehavior.prototype.getValidateTrigger = function (controller) {
            return controller.validateTrigger;
        };
        ValidateBindingBehavior.inject = [aurelia_task_queue_1.TaskQueue];
        ValidateBindingBehavior = tslib_1.__decorate([
            aurelia_binding_1.bindingBehavior('validate')
        ], ValidateBindingBehavior);
        return ValidateBindingBehavior;
    }(validate_binding_behavior_base_1.ValidateBindingBehaviorBase));
    exports.ValidateBindingBehavior = ValidateBindingBehavior;
    /**
     * Binding behavior. Indicates the bound property will be validated
     * manually, by calling controller.validate(). No automatic validation
     * triggered by data-entry or blur will occur.
     */
    var ValidateManuallyBindingBehavior = /** @class */ (function (_super) {
        tslib_1.__extends(ValidateManuallyBindingBehavior, _super);
        function ValidateManuallyBindingBehavior() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ValidateManuallyBindingBehavior.prototype.getValidateTrigger = function () {
            return validate_trigger_1.validateTrigger.manual;
        };
        ValidateManuallyBindingBehavior.inject = [aurelia_task_queue_1.TaskQueue];
        ValidateManuallyBindingBehavior = tslib_1.__decorate([
            aurelia_binding_1.bindingBehavior('validateManually')
        ], ValidateManuallyBindingBehavior);
        return ValidateManuallyBindingBehavior;
    }(validate_binding_behavior_base_1.ValidateBindingBehaviorBase));
    exports.ValidateManuallyBindingBehavior = ValidateManuallyBindingBehavior;
    /**
     * Binding behavior. Indicates the bound property should be validated
     * when the associated element blurs.
     */
    var ValidateOnBlurBindingBehavior = /** @class */ (function (_super) {
        tslib_1.__extends(ValidateOnBlurBindingBehavior, _super);
        function ValidateOnBlurBindingBehavior() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ValidateOnBlurBindingBehavior.prototype.getValidateTrigger = function () {
            return validate_trigger_1.validateTrigger.blur;
        };
        ValidateOnBlurBindingBehavior.inject = [aurelia_task_queue_1.TaskQueue];
        ValidateOnBlurBindingBehavior = tslib_1.__decorate([
            aurelia_binding_1.bindingBehavior('validateOnBlur')
        ], ValidateOnBlurBindingBehavior);
        return ValidateOnBlurBindingBehavior;
    }(validate_binding_behavior_base_1.ValidateBindingBehaviorBase));
    exports.ValidateOnBlurBindingBehavior = ValidateOnBlurBindingBehavior;
    /**
     * Binding behavior. Indicates the bound property should be validated
     * when the associated element is changed by the user, causing a change
     * to the model.
     */
    var ValidateOnChangeBindingBehavior = /** @class */ (function (_super) {
        tslib_1.__extends(ValidateOnChangeBindingBehavior, _super);
        function ValidateOnChangeBindingBehavior() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ValidateOnChangeBindingBehavior.prototype.getValidateTrigger = function () {
            return validate_trigger_1.validateTrigger.change;
        };
        ValidateOnChangeBindingBehavior.inject = [aurelia_task_queue_1.TaskQueue];
        ValidateOnChangeBindingBehavior = tslib_1.__decorate([
            aurelia_binding_1.bindingBehavior('validateOnChange')
        ], ValidateOnChangeBindingBehavior);
        return ValidateOnChangeBindingBehavior;
    }(validate_binding_behavior_base_1.ValidateBindingBehaviorBase));
    exports.ValidateOnChangeBindingBehavior = ValidateOnChangeBindingBehavior;
    /**
     * Binding behavior. Indicates the bound property should be validated
     * when the associated element blurs or is changed by the user, causing
     * a change to the model.
     */
    var ValidateOnChangeOrBlurBindingBehavior = /** @class */ (function (_super) {
        tslib_1.__extends(ValidateOnChangeOrBlurBindingBehavior, _super);
        function ValidateOnChangeOrBlurBindingBehavior() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ValidateOnChangeOrBlurBindingBehavior.prototype.getValidateTrigger = function () {
            return validate_trigger_1.validateTrigger.changeOrBlur;
        };
        ValidateOnChangeOrBlurBindingBehavior.inject = [aurelia_task_queue_1.TaskQueue];
        ValidateOnChangeOrBlurBindingBehavior = tslib_1.__decorate([
            aurelia_binding_1.bindingBehavior('validateOnChangeOrBlur')
        ], ValidateOnChangeOrBlurBindingBehavior);
        return ValidateOnChangeOrBlurBindingBehavior;
    }(validate_binding_behavior_base_1.ValidateBindingBehaviorBase));
    exports.ValidateOnChangeOrBlurBindingBehavior = ValidateOnChangeOrBlurBindingBehavior;
    var ValidateOnFocusoutBindingBehavior = /** @class */ (function (_super) {
        tslib_1.__extends(ValidateOnFocusoutBindingBehavior, _super);
        function ValidateOnFocusoutBindingBehavior() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ValidateOnFocusoutBindingBehavior.prototype.getValidateTrigger = function () {
            return validate_trigger_1.validateTrigger.focusout;
        };
        ValidateOnFocusoutBindingBehavior.inject = [aurelia_task_queue_1.TaskQueue];
        ValidateOnFocusoutBindingBehavior = tslib_1.__decorate([
            aurelia_binding_1.bindingBehavior('validateOnFocusout')
        ], ValidateOnFocusoutBindingBehavior);
        return ValidateOnFocusoutBindingBehavior;
    }(validate_binding_behavior_base_1.ValidateBindingBehaviorBase));
    exports.ValidateOnFocusoutBindingBehavior = ValidateOnFocusoutBindingBehavior;
    var ValidateOnChangeOrFocusoutBindingBehavior = /** @class */ (function (_super) {
        tslib_1.__extends(ValidateOnChangeOrFocusoutBindingBehavior, _super);
        function ValidateOnChangeOrFocusoutBindingBehavior() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ValidateOnChangeOrFocusoutBindingBehavior.prototype.getValidateTrigger = function () {
            return validate_trigger_1.validateTrigger.changeOrFocusout;
        };
        ValidateOnChangeOrFocusoutBindingBehavior.inject = [aurelia_task_queue_1.TaskQueue];
        ValidateOnChangeOrFocusoutBindingBehavior = tslib_1.__decorate([
            aurelia_binding_1.bindingBehavior('validateOnChangeOrFocusout')
        ], ValidateOnChangeOrFocusoutBindingBehavior);
        return ValidateOnChangeOrFocusoutBindingBehavior;
    }(validate_binding_behavior_base_1.ValidateBindingBehaviorBase));
    exports.ValidateOnChangeOrFocusoutBindingBehavior = ValidateOnChangeOrFocusoutBindingBehavior;
});
