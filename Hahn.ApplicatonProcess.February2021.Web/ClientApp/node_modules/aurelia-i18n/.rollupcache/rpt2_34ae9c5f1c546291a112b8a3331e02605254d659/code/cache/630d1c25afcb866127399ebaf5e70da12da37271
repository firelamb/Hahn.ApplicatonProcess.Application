{"map":"{\"version\":3,\"file\":\"df-binding-behavior.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/df/df-binding-behavior.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,8BAA8B,CAAC;AACrE,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAGlE,IAAa,iBAAiB,GAA9B,MAAa,iBAAiB;IAG5B,YAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAI,CAAC;IAF9D,MAAM,CAAC,MAAM,KAAK,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAInD,IAAI,CAAC,OAAY,EAAE,MAAW;QACnC,2BAA2B;QAC1B,IAAI,CAAC,qBAAqB,CAAC,IAAY,CAAC,OAAO,EAAE,MAAM,EAAE,4BAA4B,CAAC,CAAC;QACxF,sDAAsD;QACtD,wEAAwE;QACxE,MAAM,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;QAClD,2CAA2C;QAC3C,IAAI,gBAAgB,CAAC,SAAS,EAAE;YAC9B,OAAO;SACR;QACD,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC;QAClC,MAAM,UAAU,GAAG,gBAAgB,CAAC,UAAU,CAAC;QAC/C,gBAAgB,CAAC,UAAU,GAAG,IAAI,cAAc,CAC9C,UAAU,EAAE,IAAI,EAAE,gBAAgB,CAAC,IAAI,EAAE,CAAC,UAAU,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAChF,CAAC;IACJ,CAAC;IACM,MAAM,CAAC,OAAY,EAAE,MAAW;QACrC,6BAA6B;QAC7B,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;CACF,CAAA;AAzBY,iBAAiB;IAD7B,eAAe,CAAC,IAAI,CAAC;GACT,iBAAiB,CAyB7B;SAzBY,iBAAiB\"}","code":"import * as tslib_1 from \"tslib\";\nimport { SignalBindingBehavior } from \"aurelia-templating-resources\";\nimport { ValueConverter, bindingBehavior } from \"aurelia-binding\";\nlet DfBindingBehavior = class DfBindingBehavior {\n    constructor(signalBindingBehavior) {\n        this.signalBindingBehavior = signalBindingBehavior;\n    }\n    static inject() { return [SignalBindingBehavior]; }\n    bind(binding, source) {\n        // bind the signal behavior\n        this.signalBindingBehavior.bind(binding, source, \"aurelia-translation-signal\");\n        // rewrite the expression to use the DfValueConverter.\n        // pass through any args to the binding behavior to the DfValueConverter\n        const sourceExpression = binding.sourceExpression;\n        // do create the sourceExpression only once\n        if (sourceExpression.rewritten) {\n            return;\n        }\n        sourceExpression.rewritten = true;\n        const expression = sourceExpression.expression;\n        sourceExpression.expression = new ValueConverter(expression, \"df\", sourceExpression.args, [expression, ...sourceExpression.args]);\n    }\n    unbind(binding, source) {\n        // unbind the signal behavior\n        this.signalBindingBehavior.unbind(binding, source);\n    }\n};\nDfBindingBehavior = tslib_1.__decorate([\n    bindingBehavior(\"df\")\n], DfBindingBehavior);\nexport { DfBindingBehavior };\n//# sourceMappingURL=df-binding-behavior.js.map"}
