{"map":"{\"version\":3,\"file\":\"rt-binding-behavior.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/rt/rt-binding-behavior.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,qBAAqB,EAAE,MAAM,8BAA8B,CAAC;AACrE,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAGlE;IAGE,2BAAoB,qBAA4C;QAA5C,0BAAqB,GAArB,qBAAqB,CAAuB;IAAI,CAAC;IAFvD,wBAAM,GAApB,cAAyB,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IAInD,gCAAI,GAAX,UAAY,OAAY,EAAE,MAAW;QACnC,2BAA2B;QAC1B,IAAI,CAAC,qBAAqB,CAAC,IAAY,CACtC,OAAO,EAAE,MAAM,EAAE,4BAA4B,EAAE,6BAA6B,CAC7E,CAAC;QACF,sDAAsD;QACtD,wEAAwE;QACxE,IAAM,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;QAClD,2CAA2C;QAC3C,IAAI,gBAAgB,CAAC,SAAS,EAAE;YAC9B,OAAO;SACR;QACD,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC;QAClC,IAAM,UAAU,GAAG,gBAAgB,CAAC,UAAU,CAAC;QAC/C,gBAAgB,CAAC,UAAU,GAAG,IAAI,cAAc,CAC9C,UAAU,EAAE,IAAI,EAAE,gBAAgB,CAAC,IAAI,GAAG,UAAU,SAAK,gBAAgB,CAAC,IAAI,EAC/E,CAAC;IACJ,CAAC;IAEM,kCAAM,GAAb,UAAc,OAAY,EAAE,MAAW;QACrC,6BAA6B;QAC7B,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;IA3BU,iBAAiB;QAD7B,eAAe,CAAC,IAAI,CAAC;OACT,iBAAiB,CA4B7B;IAAD,wBAAC;CAAA,AA5BD,IA4BC;SA5BY,iBAAiB\"}","code":"import * as tslib_1 from \"tslib\";\nimport { SignalBindingBehavior } from \"aurelia-templating-resources\";\nimport { ValueConverter, bindingBehavior } from \"aurelia-binding\";\nvar RtBindingBehavior = /** @class */ (function () {\n    function RtBindingBehavior(signalBindingBehavior) {\n        this.signalBindingBehavior = signalBindingBehavior;\n    }\n    RtBindingBehavior.inject = function () { return [SignalBindingBehavior]; };\n    RtBindingBehavior.prototype.bind = function (binding, source) {\n        // bind the signal behavior\n        this.signalBindingBehavior.bind(binding, source, \"aurelia-translation-signal\", \"aurelia-relativetime-signal\");\n        // rewrite the expression to use the RtValueConverter.\n        // pass through any args to the binding behavior to the RtValueConverter\n        var sourceExpression = binding.sourceExpression;\n        // do create the sourceExpression only once\n        if (sourceExpression.rewritten) {\n            return;\n        }\n        sourceExpression.rewritten = true;\n        var expression = sourceExpression.expression;\n        sourceExpression.expression = new ValueConverter(expression, \"rt\", sourceExpression.args, [expression].concat(sourceExpression.args));\n    };\n    RtBindingBehavior.prototype.unbind = function (binding, source) {\n        // unbind the signal behavior\n        this.signalBindingBehavior.unbind(binding, source);\n    };\n    RtBindingBehavior = tslib_1.__decorate([\n        bindingBehavior(\"rt\")\n    ], RtBindingBehavior);\n    return RtBindingBehavior;\n}());\nexport { RtBindingBehavior };\n//# sourceMappingURL=rt-binding-behavior.js.map"}
