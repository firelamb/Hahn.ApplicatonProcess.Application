{"map":"{\"version\":3,\"file\":\"df-value-converter.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/df/df-value-converter.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AACrC,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAGjD,IAAa,gBAAgB,GAA7B,MAAa,gBAAgB;IAG3B,YAAoB,OAAa;QAAb,YAAO,GAAP,OAAO,CAAM;IAAI,CAAC;IAF/B,MAAM,CAAC,MAAM,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAIlC,MAAM,CACX,KAAU,EACV,WAA8D,EAC9D,MAAe;QAEf,IAAI,KAAK,KAAK,IAAI;eACb,OAAO,KAAK,KAAK,WAAW;eAC5B,CAAC,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EACrD;YACA,OAAO,KAAK,CAAC;SACd;QAED,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,KAAY,CAAC,IAAI,CAAC,SAAS,CAAC,KAAY,CAAC,EAAE;YAChF,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;QAED,IAAI,WAAW,IAAI,CAAC,WAAW,YAAY,IAAI,CAAC,cAAc,IAAI,OAAO,WAAW,CAAC,MAAM,KAAK,UAAU,CAAC,EAAE;YAC3G,OAAO,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAClC;QAED,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,WAAyC,EAAE,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;QAC1G,OAAO,EAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;CACF,CAAA;AA5BY,gBAAgB;IAD5B,cAAc,CAAC,IAAI,CAAC;GACR,gBAAgB,CA4B5B;SA5BY,gBAAgB\"}","code":"import * as tslib_1 from \"tslib\";\nimport { I18N } from \"../i18n\";\nimport { isInteger } from \"../utils\";\nimport { valueConverter } from \"aurelia-binding\";\nlet DfValueConverter = class DfValueConverter {\n    constructor(service) {\n        this.service = service;\n    }\n    static inject() { return [I18N]; }\n    toView(value, dfOrOptions, locale) {\n        if (value === null\n            || typeof value === \"undefined\"\n            || (typeof value === \"string\" && value.trim() === \"\")) {\n            return value;\n        }\n        if (typeof value === \"string\" && isNaN(value) && !isInteger(value)) {\n            value = new Date(value);\n        }\n        if (dfOrOptions && (dfOrOptions instanceof Intl.DateTimeFormat && typeof dfOrOptions.format === \"function\")) {\n            return dfOrOptions.format(value);\n        }\n        const df = this.service.df(dfOrOptions, locale || this.service.getLocale());\n        return df.format(value);\n    }\n};\nDfValueConverter = tslib_1.__decorate([\n    valueConverter(\"df\")\n], DfValueConverter);\nexport { DfValueConverter };\n//# sourceMappingURL=df-value-converter.js.map"}
